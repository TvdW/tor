/* introduce_handoff.h -- generated by by Trunnel v1.4.3.
 * https://gitweb.torproject.org/trunnel.git
 * You probably shouldn't edit this file.
 */
#ifndef TRUNNEL_INTRODUCE_HANDOFF_H
#define TRUNNEL_INTRODUCE_HANDOFF_H

#include <stdint.h>
#include "trunnel.h"

#if !defined(TRUNNEL_OPAQUE) && !defined(TRUNNEL_OPAQUE_INTRODUCTION_HANDOFF_V0)
struct introduction_handoff_v0_st {
  uint32_t blob_magic;
  uint16_t blob_version;
  uint16_t plaintext_len;
  TRUNNEL_DYNARRAY_HEAD(, uint8_t) plaintext;
  uint8_t trunnel_error_code_;
};
#endif
typedef struct introduction_handoff_v0_st introduction_handoff_v0_t;
/** Return a newly allocated introduction_handoff_v0 with all elements
 * set to zero.
 */
introduction_handoff_v0_t *introduction_handoff_v0_new(void);
/** Release all storage held by the introduction_handoff_v0 in
 * 'victim'. (Do nothing if 'victim' is NULL.)
 */
void introduction_handoff_v0_free(introduction_handoff_v0_t *victim);
/** Try to parse a introduction_handoff_v0 from the buffer in 'input',
 * using up to 'len_in' bytes from the input buffer. On success,
 * return the number of bytes consumed and set *output to the newly
 * allocated introduction_handoff_v0_t. On failure, return -2 if the
 * input appears truncated, and -1 if the input is otherwise invalid.
 */
ssize_t introduction_handoff_v0_parse(introduction_handoff_v0_t **output, const uint8_t *input, const size_t len_in);
/** Return the number of bytes we expect to need to encode the
 * introduction_handoff_v0 in 'obj'. On failure, return a negative
 * value. Note that this value may be an overestimate, and can even be
 * an underestimate for certain unencodeable objects.
 */
ssize_t introduction_handoff_v0_encoded_len(const introduction_handoff_v0_t *obj);
/** Try to encode the introduction_handoff_v0 from 'input' into the
 * buffer at 'output', using up to 'avail' bytes of the output buffer.
 * On success, return the number of bytes used. On failure, return -2
 * if the buffer was not long enough, and -1 if the input was invalid.
 */
ssize_t introduction_handoff_v0_encode(uint8_t *output, size_t avail, const introduction_handoff_v0_t *input);
/** Check whether the internal state of the introduction_handoff_v0 in
 * 'obj' is consistent. Return NULL if it is, and a short message if
 * it is not.
 */
const char *introduction_handoff_v0_check(const introduction_handoff_v0_t *obj);
/** Clear any errors that were set on the object 'obj' by its setter
 * functions. Return true iff errors were cleared.
 */
int introduction_handoff_v0_clear_errors(introduction_handoff_v0_t *obj);
/** Return the value of the blob_magic field of the
 * introduction_handoff_v0_t in 'inp'
 */
uint32_t introduction_handoff_v0_get_blob_magic(introduction_handoff_v0_t *inp);
/** Set the value of the blob_magic field of the
 * introduction_handoff_v0_t in 'inp' to 'val'. Return 0 on success;
 * return -1 and set the error code on 'inp' on failure.
 */
int introduction_handoff_v0_set_blob_magic(introduction_handoff_v0_t *inp, uint32_t val);
/** Return the value of the blob_version field of the
 * introduction_handoff_v0_t in 'inp'
 */
uint16_t introduction_handoff_v0_get_blob_version(introduction_handoff_v0_t *inp);
/** Set the value of the blob_version field of the
 * introduction_handoff_v0_t in 'inp' to 'val'. Return 0 on success;
 * return -1 and set the error code on 'inp' on failure.
 */
int introduction_handoff_v0_set_blob_version(introduction_handoff_v0_t *inp, uint16_t val);
/** Return the value of the plaintext_len field of the
 * introduction_handoff_v0_t in 'inp'
 */
uint16_t introduction_handoff_v0_get_plaintext_len(introduction_handoff_v0_t *inp);
/** Set the value of the plaintext_len field of the
 * introduction_handoff_v0_t in 'inp' to 'val'. Return 0 on success;
 * return -1 and set the error code on 'inp' on failure.
 */
int introduction_handoff_v0_set_plaintext_len(introduction_handoff_v0_t *inp, uint16_t val);
/** Return the length of the dynamic array holding the plaintext field
 * of the introduction_handoff_v0_t in 'inp'.
 */
size_t introduction_handoff_v0_getlen_plaintext(const introduction_handoff_v0_t *inp);
/** Return the element at position 'idx' of the dynamic array field
 * plaintext of the introduction_handoff_v0_t in 'inp'.
 */
uint8_t introduction_handoff_v0_get_plaintext(introduction_handoff_v0_t *inp, size_t idx);
/** Change the element at position 'idx' of the dynamic array field
 * plaintext of the introduction_handoff_v0_t in 'inp', so that it
 * will hold the value 'elt'.
 */
int introduction_handoff_v0_set_plaintext(introduction_handoff_v0_t *inp, size_t idx, uint8_t elt);
/** Append a new element 'elt' to the dynamic array field plaintext of
 * the introduction_handoff_v0_t in 'inp'.
 */
int introduction_handoff_v0_add_plaintext(introduction_handoff_v0_t *inp, uint8_t elt);
/** Return a pointer to the variable-length array field plaintext of
 * 'inp'.
 */
uint8_t * introduction_handoff_v0_getarray_plaintext(introduction_handoff_v0_t *inp);
/** Change the length of the variable-length array field plaintext of
 * 'inp' to 'newlen'.Fill extra elements with 0. Return 0 on success;
 * return -1 and set the error code on 'inp' on failure.
 */
int introduction_handoff_v0_setlen_plaintext(introduction_handoff_v0_t *inp, size_t newlen);


#endif
